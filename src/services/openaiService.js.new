// Creating openaiService.js file

// src/services/openaiService.js - Sử dụng Fetch API thay vì Axios

// Cấu hình OpenAI API
const OPENAI_API_URL = 'https://api.openai.com/v1';
const DEFAULT_MODEL = 'gpt-4'; // hoặc 'gpt-3.5-turbo' cho chi phí thấp hơn

/**
 * Tạo request options cho Fetch API
 * @param {string} apiKey - API key của OpenAI
 * @param {Object} body - Body của request
 * @returns {Object} - Options cho fetch
 */
const createRequestOptions = (apiKey, body) => {
  return {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify(body)
  };
};

/**
 * Tạo prompt cho bài thuyết trình
 * @param {Object} options - Các tùy chọn cho bài thuyết trình
 * @returns {string} - Prompt hoàn chỉnh
 */
const createPresentationPrompt = (options) => {
  const { 
    topic, 
    style, 
    slides, 
    language = 'vi',
    purpose = 'business',
    audience = 'general',
    includeCharts = true,
    includeImages = true
  } = options;
  
  let styleDescription = '';
  switch (style) {
    case 'professional':
      styleDescription = 'Chuyên nghiệp, súc tích, rõ ràng, phù hợp trong môi trường doanh nghiệp';
      break;
    case 'creative':
      styleDescription = 'Sáng tạo, hấp dẫn, với ngôn ngữ sinh động và ý tưởng độc đáo';
      break;
    case 'minimal':
      styleDescription = 'Tối giản, chỉ những thông tin thiết yếu, trình bày đơn giản';
      break;
    case 'academic':
      styleDescription = 'Học thuật, chính xác, có trích dẫn và thuật ngữ chuyên ngành';
      break;
    case 'nature':
      styleDescription = 'Lấy cảm hứng từ thiên nhiên, thân thiện với môi trường, nhẹ nhàng';
      break;
    case 'tech':
      styleDescription = 'Định hướng công nghệ, hiện đại, đổi mới, tập trung vào xu hướng mới';
      break;
    default:
      styleDescription = 'Chuyên nghiệp và dễ hiểu';
  }
  
  let audienceDescription = '';
  switch (audience) {
    case 'executive':
      audienceDescription = 'Lãnh đạo và quản lý cấp cao, tập trung vào chiến lược và kết quả';
      break;
    case 'technical':
      audienceDescription = 'Chuyên gia kỹ thuật, có kiến thức chuyên môn trong lĩnh vực';
      break;
    case 'student':
      audienceDescription = 'Học sinh và sinh viên, nội dung giáo dục và dễ tiếp cận';
      break;
    case 'client':
      audienceDescription = 'Khách hàng và đối tác, tập trung vào giá trị và lợi ích';
      break;
    default:
      audienceDescription = 'Đối tượng đại chúng với nhiều cấp độ hiểu biết khác nhau';
  }
  
  let purposeDescription = '';
  switch (purpose) {
    case 'education':
      purposeDescription = 'Giáo dục và đào tạo, truyền đạt kiến thức';
      break;
    case 'marketing':
      purposeDescription = 'Marketing và truyền thông, thuyết phục và thu hút';
      break;
    case 'academic':
      purposeDescription = 'Nghiên cứu học thuật, báo cáo khoa học';
      break;
    case 'personal':
      purposeDescription = 'Sử dụng cá nhân, chia sẻ thông tin hoặc kỹ năng';
      break;
    default:
      purposeDescription = 'Sử dụng trong môi trường doanh nghiệp và công việc';
  }
  
  // Bổ sung thông tin về biểu đồ và hình ảnh
  const mediaGuidance = `
Hướng dẫn về phương tiện trực quan:
- ${includeCharts ? 'Đề xuất dữ liệu biểu đồ thống kê cho các slide có nội dung phù hợp.' : 'Không đề xuất biểu đồ.'}
- ${includeImages ? 'Đề xuất từ khóa hình ảnh phù hợp cho mỗi slide.' : 'Không đề xuất hình ảnh.'}
`;
  
  return `
Tạo một bài thuyết trình chi tiết và chuyên nghiệp về chủ đề "${topic}" với ${slides} slides.

Thông tin cơ bản:
- Phong cách: ${styleDescription}
- Đối tượng: ${audienceDescription}
- Mục đích: ${purposeDescription}
- Ngôn ngữ: ${language === 'vi' ? 'Tiếng Việt' : language === 'en' ? 'Tiếng Anh' : `${language}`}
${mediaGuidance}

Format JSON trả về như sau:
{
  "title": "Tiêu đề bài thuyết trình",
  "description": "Mô tả ngắn về bài thuyết trình",
  "slides": [
    {
      "title": "Tiêu đề slide",
      "content": "Nội dung slide với định dạng súc tích và dễ hiểu",
      "notes": "Ghi chú cho người thuyết trình (không hiển thị trong slide)",
      "keywords": ["từ_khóa_1", "từ_khóa_2"] // Từ khóa hình ảnh gợi ý nếu cần
    }
  ]
}

Hướng dẫn chi tiết:
1. Slide đầu tiên cần là trang bìa hấp dẫn với tiêu đề chính và phụ đề.
2. Slide cuối cùng nên là trang kết luận và lời cảm ơn.
3. Mỗi slide nên có cấu trúc rõ ràng, nội dung ngắn gọn (tối đa 5-7 điểm chính).
4. Tránh đoạn văn dài, ưu tiên sử dụng danh sách, từ khóa và câu ngắn.
5. Đối với các slide có số liệu, hãy đề xuất dạng biểu đồ phù hợp (nếu được yêu cầu).
6. Ghi chú cho người thuyết trình nên bao gồm thông tin bổ sung, lời thoại gợi ý.

Hãy đảm bảo nội dung:
- Có tính học thuật và đáng tin cậy nếu là bài thuyết trình giáo dục/học thuật
- Có tính thuyết phục và hấp dẫn nếu là bài thuyết trình marketing/kinh doanh
- Dễ hiểu và phù hợp với trình độ nếu là bài thuyết trình cho học sinh/sinh viên
- Chuyên nghiệp và định hướng kết quả nếu là bài thuyết trình cho lãnh đạo

Đặc biệt chú ý tạo cấu trúc rõ ràng và hợp lý trong toàn bộ bài thuyết trình.
`;
};

/**
 * Tạo bài thuyết trình bằng OpenAI API
 * @param {Object} options - Tùy chọn bài thuyết trình
 * @param {string} apiKey - API key của OpenAI
 * @returns {Promise<Object>} - Dữ liệu bài thuyết trình
 */
export const generatePresentation = async (options, apiKey) => {
  try {
    if (!apiKey) {
      throw new Error('OpenAI API Key không được cung cấp');
    }

    const prompt = createPresentationPrompt(options);
    
    const requestBody = {
      model: options.model || DEFAULT_MODEL,
      messages: [
        {
          role: 'system',
          content: 'Bạn là trợ lý AI chuyên tạo nội dung bài thuyết trình chuyên nghiệp. Bạn có kiến thức sâu rộng về nhiều lĩnh vực và hiểu rõ nguyên tắc thiết kế bài thuyết trình hiệu quả. Luôn trả về JSON theo định dạng yêu cầu.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 3000
    };

    // Sử dụng Fetch API thay vì Axios
    const response = await fetch(`${OPENAI_API_URL}/chat/completions`, createRequestOptions(apiKey, requestBody));
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error?.message || `API error: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.choices && data.choices.length > 0) {
      const content = data.choices[0].message.content;
      
      try {
        // Phân tích cú pháp JSON từ phản hồi
        const jsonStartIndex = content.indexOf('{');
        const jsonEndIndex = content.lastIndexOf('}') + 1;
        
        if (jsonStartIndex >= 0 && jsonEndIndex > jsonStartIndex) {
          const jsonContent = content.substring(jsonStartIndex, jsonEndIndex);
          let presentationData;
          
          try {
            presentationData = JSON.parse(jsonContent);
          } catch (innerError) {
            console.error('Lỗi phân tích JSON, thử dùng phương pháp khác:', innerError);
            // Thử cách khác - tìm bằng regex
            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              presentationData = JSON.parse(jsonMatch[0]);
            } else {
              throw new Error('Không thể phân tích dữ liệu JSON từ phản hồi');
            }
          }
          
          // Đảm bảo dữ liệu có cấu trúc hợp lệ
          if (!presentationData.slides || !Array.isArray(presentationData.slides)) {
            presentationData.slides = createFallbackSlides(content, options.slides);
          }
          
          // Thêm metadata
          presentationData.metadata = {
            created: new Date().toISOString(),
            topic: options.topic,
            style: options.style,
            language: options.language,
            slideCount: options.slides
          };
          
          return presentationData;
        } else {
          throw new Error('Không tìm thấy dữ liệu JSON hợp lệ trong phản hồi');
        }
      } catch (jsonError) {
        console.error('Lỗi phân tích JSON:', jsonError);
        
        // Nếu không phân tích được JSON, tạo dữ liệu có cấu trúc từ nội dung
        const fallbackData = {
          title: options.topic,
          description: `Bài thuyết trình về ${options.topic}`,
          slides: createFallbackSlides(content, options.slides),
          metadata: {
            created: new Date().toISOString(),
            topic: options.topic,
            style: options.style,
            language: options.language,
            slideCount: options.slides,
            fallback: true
          }
        };
        
        return fallbackData;
      }
    } else {
      throw new Error('Không nhận được phản hồi hợp lệ từ OpenAI');
    }
  } catch (error) {
    console.error('Error generating presentation:', error);
    throw error;
  }
};

/**
 * Cải thiện nội dung slide hiện có
 * @param {string} content - Nội dung cần cải thiện
 * @param {string} apiKey - API key của OpenAI
 * @returns {Promise<string>} - Nội dung được cải thiện
 */
export const enhanceSlideContent = async (content, apiKey) => {
  try {
    if (!apiKey) {
      throw new Error('OpenAI API Key không được cung cấp');
    }
    
    if (!content || content.trim().length < 10) {
      console.log('Nội dung quá ngắn để cải thiện');
      return content;
    }
    
    const requestBody = {
      model: 'gpt-3.5-turbo', // Sử dụng model rẻ hơn cho tác vụ đơn giản
      messages: [
        {
          role: 'system',
          content: 'Bạn là chuyên gia về tạo nội dung bài thuyết trình. Nhiệm vụ của bạn là cải thiện nội dung slide để nó trở nên súc tích, rõ ràng, và hiệu quả hơn. Giữ nguyên thông tin quan trọng, loại bỏ những gì thừa, và làm cho nội dung dễ đọc và ghi nhớ hơn. Chỉ trả về nội dung đã được cải thiện, không thêm giải thích hay bình luận.'
        },
        {
          role: 'user',
          content: `Hãy cải thiện nội dung slide sau đây để nó ngắn gọn, súc tích, dễ hiểu và thu hút hơn, phù hợp với bài thuyết trình chuyên nghiệp:\n\n${content}`
        }
      ],
      temperature: 0.7,
      max_tokens: 1000
    };

    // Sử dụng Fetch API với timeout để tránh chờ quá lâu
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // Timeout sau 10 giây
    
    try {
      const response = await fetch(`${OPENAI_API_URL}/chat/completions`, {
        ...createRequestOptions(apiKey, requestBody),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        console.error('Lỗi từ API khi cải thiện nội dung:', response.status);
        return content; // Trả về nội dung ban đầu nếu có lỗi
      }
      
      const data = await response.json();

      if (data.choices && data.choices.length > 0) {
        const enhancedContent = data.choices[0].message.content;
        
        // Đảm bảo nội dung cải thiện không quá ngắn
        if (enhancedContent && enhancedContent.length > content.length / 2) {
          return enhancedContent;
        }
        
        console.log('Nội dung cải thiện quá ngắn, giữ nguyên nội dung ban đầu');
        return content;
      }
    } catch (fetchError) {
      clearTimeout(timeoutId);
      console.error('Lỗi khi gọi API cải thiện nội dung:', fetchError);
      // Tiếp tục với nội dung ban đầu
    }
    
    return content; // Trả về nội dung ban đầu nếu không thành công
  } catch (error) {
    console.error('Error enhancing slide content:', error);
    return content; // Trả về nội dung ban đầu khi có lỗi
  }
};

/**
 * Đề xuất hình ảnh dựa trên nội dung slide
 * @param {string} slideContent - Nội dung slide
 * @param {string} apiKey - API key của OpenAI
 * @returns {Promise<Array>} - Mảng các từ khóa tìm kiếm hình ảnh
 */
export const suggestImageKeywords = async (slideContent, apiKey) => {
  try {
    if (!apiKey) {
      throw new Error('OpenAI API Key không được cung cấp');
    }
    
    // Nếu nội dung quá ngắn, sử dụng từ khóa mặc định
    if (!slideContent || slideContent.trim().length < 10) {
      return ['presentation', 'slides', 'business'];
    }
    
    const requestBody = {
      model: 'gpt-3.5-turbo', // Sử dụng model rẻ hơn cho tác vụ đơn giản
      messages: [
        {
          role: 'system',
          content: 'Bạn là chuyên gia về tìm kiếm và gợi ý hình ảnh phù hợp cho bài thuyết trình. Nhiệm vụ của bạn là phân tích nội dung và đề xuất từ khóa tìm kiếm hình ảnh phù hợp, có tính thẩm mỹ và chuyên nghiệp. Chỉ trả về một mảng JSON với các từ khóa, không có giải thích hoặc văn bản khác.'
        },
        {
          role: 'user',
          content: `Dựa trên nội dung slide sau, hãy đề xuất 3 từ khóa tìm kiếm hình ảnh phù hợp. Trả về dưới dạng mảng JSON, mỗi từ khóa nên ngắn gọn (1-3 từ) và có tính minh họa cao.\n\n${slideContent}`
        }
      ],
      temperature: 0.6,
      max_tokens: 150
    };

    // Sử dụng Fetch API
    const response = await fetch(`${OPENAI_API_URL}/chat/completions`, createRequestOptions(apiKey, requestBody));
    
    if (!response.ok) {
      console.error('Lỗi từ API:', response.status);
      return getDefaultImageKeywords(slideContent); // Trả về từ khóa mặc định
    }
    
    const data = await response.json();

    if (data.choices && data.choices.length > 0) {
      const content = data.choices[0].message.content;
      
      try {
        // Cố gắng phân tích JSON từ phản hồi
        const jsonMatch = content.match(/\[.*\]/s);
        if (jsonMatch) {
          const parsedArray = JSON.parse(jsonMatch[0]);
          if (Array.isArray(parsedArray) && parsedArray.length > 0) {
            return parsedArray.filter(item => typeof item === 'string' && item.length > 0);
          }
        }
        
        const parsedResponse = JSON.parse(content);
        if (Array.isArray(parsedResponse) && parsedResponse.length > 0) {
          return parsedResponse.filter(item => typeof item === 'string' && item.length > 0);
        }
        
        if (parsedResponse.keywords && Array.isArray(parsedResponse.keywords)) {
          return parsedResponse.keywords.filter(item => typeof item === 'string' && item.length > 0);
        }
        
        // Nếu không có kết quả hợp lệ, sử dụng phương pháp trích xuất từ văn bản
        return extractKeywordsFromText(content);
      } catch (e) {
        console.error('Lỗi phân tích JSON trong suggestImageKeywords:', e);
        return extractKeywordsFromText(content);
      }
    }
    
    return getDefaultImageKeywords(slideContent);
  } catch (error) {
    console.error('Error suggesting image keywords:', error);
    return getDefaultImageKeywords(slideContent);
  }
};

/**
 * Trích xuất từ khóa từ văn bản
 * @param {string} text - Văn bản để trích xuất
 * @returns {Array} - Mảng các từ khóa
 */
function extractKeywordsFromText(text) {
  if (!text) return ['presentation', 'business', 'professional'];
  
  // Tìm các từ khóa trong dấu ngoặc kép hoặc đơn
  const keywordMatches = text.match(/"([^"]+)"|'([^']+)'/g);
  if (keywordMatches && keywordMatches.length > 0) {
    return keywordMatches.map(match => match.replace(/["']/g, '')).filter(keyword => keyword.length > 0);
  }
  
  // Trích xuất thủ công dựa trên dòng
  const extractedKeywords = text.split('\n')
    .filter(line => line.trim().length > 0)
    .map(line => line.replace(/^\d+\.\s*/, '').trim())
    .filter(line => line.length > 0 && line.length < 30)
    .slice(0, 3);
  
  if (extractedKeywords.length > 0) {
    return extractedKeywords;
  }
  
  return ['presentation', 'business', 'professional'];
}

/**
 * Tạo từ khóa mặc định dựa trên nội dung
 * @param {string} content - Nội dung slide
 * @returns {Array} - Mảng các từ khóa mặc định
 */
function getDefaultImageKeywords(content) {
  if (!content || typeof content !== 'string') {
    return ['presentation', 'business', 'professional'];
  }
  
  const lowerContent = content.toLowerCase();
  
  if (lowerContent.includes('marketing') || lowerContent.includes('tiếp thị')) {
    return ['marketing', 'digital marketing', 'social media'];
  }
  
  if (lowerContent.includes('technology') || lowerContent.includes('công nghệ')) {
    return ['technology', 'innovation', 'digital'];
  }
  
  if (lowerContent.includes('education') || lowerContent.includes('giáo dục')) {
    return ['education', 'learning', 'teaching'];
  }
  
  if (lowerContent.includes('finance') || lowerContent.includes('tài chính')) {
    return ['finance', 'business chart', 'economy'];
  }
  
  if (lowerContent.includes('nature') || lowerContent.includes('thiên nhiên')) {
    return ['nature', 'landscape', 'environment'];
  }
  
  // Mặc định
  return ['presentation', 'business', 'professional'];
}

/**
 * Dịch thuật nội dung sang ngôn ngữ khác
 * @param {string} content - Nội dung cần dịch
 * @param {string} targetLanguage - Mã ngôn ngữ đích (vd: 'en', 'vi', 'fr')
 * @param {string} apiKey - API key của OpenAI
 * @returns {Promise<string>} - Nội dung đã được dịch
 */
export const translateContent = async (content, targetLanguage, apiKey) => {
  try {
    if (!apiKey) {
      throw new Error('OpenAI API Key không được cung cấp');
    }
    
    let languageName = '';
    switch (targetLanguage) {
      case 'en': languageName = 'Tiếng Anh'; break;
      case 'vi': languageName = 'Tiếng Việt'; break;
      case 'fr': languageName = 'Tiếng Pháp'; break;
      case 'ja': languageName = 'Tiếng Nhật'; break;
      case 'ko': languageName = 'Tiếng Hàn'; break;
      case 'zh': languageName = 'Tiếng Trung'; break;
      default: languageName = targetLanguage;
    }
    
    const requestBody = {
      model: 'gpt-3.5-turbo', // Sử dụng model rẻ hơn cho tác vụ dịch thuật
      messages: [
        {
          role: 'system',
          content: `Bạn là một chuyên gia dịch thuật. Nhiệm vụ của bạn là dịch nội dung sang ${languageName} một cách chính xác, tự nhiên và phù hợp với ngữ cảnh. Giữ nguyên định dạng và cấu trúc của nội dung gốc.`
        },
        {
          role: 'user',
          content: `Hãy dịch nội dung sau sang ${languageName}:\n\n${content}`
        }
      ],
      temperature: 0.3, // Nhiệt độ thấp cho kết quả nhất quán
      max_tokens: 1500
    };

    // Sử dụng Fetch API
    const response = await fetch(`${OPENAI_API_URL}/chat/completions`, createRequestOptions(apiKey, requestBody));
    
    if (!response.ok) {
      return content; // Trả về nội dung gốc nếu có lỗi
    }
    
    const data = await response.json();

    if (data.choices && data.choices.length > 0) {
      return data.choices[0].message.content;
    }
    
    return content; // Trả về nội dung gốc nếu không thành công
  } catch (error) {
    console.error('Error translating content:', error);
    return content; // Trả về nội dung gốc khi có lỗi
  }
};

/**
 * Tạo dữ liệu slide dự phòng khi không thể phân tích JSON
 * @param {string} content - Nội dung từ API
 * @param {number} slideCount - Số slide cần tạo
 * @returns {Array} - Mảng các slide
 */
function createFallbackSlides(content, slideCount) {
  // Tách nội dung thành từng phần dựa trên dòng trống
  const sections = content.split('\n\n');
  
  // Nếu không có đủ phần để tạo các slide
  if (sections.length < slideCount) {
    // Tạo slide cơ bản với tiêu đề và nội dung ngẫu nhiên
    const basicSlides = [];
    
    // Slide đầu tiên - Trang bìa
    basicSlides.push({
      title: "Trang bìa",
      content: "Bài thuyết trình của tôi",
      notes: "Giới thiệu bản thân và chủ đề"
    });
    
    // Các slide nội dung
    for (let i = 1; i < slideCount - 1; i++) {
      basicSlides.push({
        title: `Slide ${i + 1}`,
        content: `Nội dung cho slide ${i + 1}`,
        notes: `Ghi chú cho slide ${i + 1}`
      });
    }
    
    // Slide cuối - Kết luận
    basicSlides.push({
      title: "Kết luận",
      content: "Cảm ơn sự chú ý của quý vị!",
      notes: "Tóm tắt những điểm chính và kết thúc bài thuyết trình"
    });
    
    return basicSlides;
  }
  
  // Nếu có đủ phần, tạo slide từ các phần
  const slides = [];
  
  // Số phần cho mỗi slide
  const sectionsPerSlide = Math.max(1, Math.floor(sections.length / slideCount));
  
  for (let i = 0; i < slideCount; i++) {
    const startIdx = i * sectionsPerSlide;
    const endIdx = Math.min(startIdx + sectionsPerSlide, sections.length);
    
    // Lấy phần đầu tiên làm tiêu đề nếu có thể
    const sectionContent = sections.slice(startIdx, endIdx).join('\n\n');
    const contentLines = sectionContent.split('\n');
    
    // Tìm kiếm tiêu đề trong các dòng
    let title = contentLines[0] || `Slide ${i + 1}`;
    let content = sectionContent;
    
    // Nếu dòng đầu tiên ngắn, sử dụng nó làm tiêu đề và loại bỏ khỏi nội dung
    if (title.length < 100 && contentLines.length > 1) {
      content = contentLines.slice(1).join('\n');
    } else {
      title = `Slide ${i + 1}`;
    }
    
    slides.push({
      title,
      content,
      notes: `Ghi chú cho ${title}`
    });
  }
  
  return slides;
} 